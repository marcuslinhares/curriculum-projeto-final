name: Build e Deploy

on:
  push:
    branches: ["main"]
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: curriculum-api
  IMAGE_TAG: latest
  SERVICE_NAME: curriculum-api
  CONTAINER_PORT: 8080
  HOST_PORT: 8080

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v3

    - name: Create file from APP_KEY
      run: echo "${{ secrets.JWT_PRIVATE_KEY }}" > app.key

    - name: Create file from APP_PUB
      run: echo "${{ secrets.JWT_PUBLIC_KEY }}" > app.pub

    - name: Copy secrets to resources directory
      run: |
        mkdir -p src/main/resources
        cp app.key src/main/resources/
        cp app.pub src/main/resources/

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package -DskipTests --file pom.xml

    - name: Login no GHCR com token pessoal
      run: echo "${{ secrets.GHCR_TOKEN }}" | docker login $REGISTRY -u ${{ github.repository_owner }} --password-stdin
      env:
        CR_PAT: ${{ secrets.GHCR_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build da imagem Docker
      run: |
        docker buildx build -t $REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG \
          --build-arg CURRICULUM_DB_URL="${{ secrets.CURRICULUM_DB_URL }}" \
          --build-arg CURRICULUM_DB_USERNAME="${{ secrets.CURRICULUM_DB_USERNAME }}" \
          --build-arg CURRICULUM_DB_PASSWORD="${{ secrets.CURRICULUM_DB_PASSWORD }}" \
          --build-arg ADMIN_NOME="${{ secrets.ADMIN_NOME }}" \
          --build-arg ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" \
          --build-arg ADMIN_SENHA="${{ secrets.ADMIN_SENHA }}" \
          --build-arg AMBIENTE="${{ secrets.AMBIENTE }}" \
          --build-arg JWT_PRIVATE_KEY="${{ secrets.JWT_PRIVATE_KEY }}" \
          --build-arg JWT_PUBLIC_KEY="${{ secrets.JWT_PUBLIC_KEY }}" \
          --build-arg PRODURL="${{ secrets.PRODURL }}" \
          --load .
        docker push $REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG

    - name: SSH na VPS e fazer deploy com Docker Swarm
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        envs: REGISTRY,IMAGE_NAME,IMAGE_TAG,SERVICE_NAME,CONTAINER_PORT,HOST_PORT
        script: |
          echo ${{ secrets.GHCR_TOKEN }} | docker login $REGISTRY -u ${{ github.repository_owner }} --password-stdin && docker pull $REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG
    
          docker service rm $SERVICE_NAME || true
    
          docker service create \
            --name $SERVICE_NAME \
            --replicas 1 \
            --publish "$HOST_PORT:$CONTAINER_PORT" \
            --env CURRICULUM_DB_URL="${{ secrets.CURRICULUM_DB_URL }}" \
            --env CURRICULUM_DB_USERNAME="${{ secrets.CURRICULUM_DB_USERNAME }}" \
            --env CURRICULUM_DB_PASSWORD="${{ secrets.CURRICULUM_DB_PASSWORD }}" \
            --env ADMIN_NOME="${{ secrets.ADMIN_NOME }}" \
            --env ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" \
            --env ADMIN_SENHA="${{ secrets.ADMIN_SENHA }}" \
            --env AMBIENTE="${{ secrets.AMBIENTE }}" \
            --env JWT_PRIVATE_KEY="${{ secrets.JWT_PRIVATE_KEY }}" \
            --env JWT_PUBLIC_KEY="${{ secrets.JWT_PUBLIC_KEY }}" \
            --env PRODURL="${{ secrets.PRODURL }}" \
            $REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME:$IMAGE_TAG


